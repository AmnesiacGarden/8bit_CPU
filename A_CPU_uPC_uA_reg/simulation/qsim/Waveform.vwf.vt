// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/23/2019 15:20:39"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          uA_reg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uA_reg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] M;
reg RST;
reg [5:0] SE;
reg T3;
// wires                                               
wire [5:0] q;

// assign statements (if any)                          
uA_reg i1 (
// port map - connection between master ports and signals/registers   
	.M(M),
	.q(q),
	.RST(RST),
	.SE(SE),
	.T3(T3)
);
initial 
begin 
#10000000 $finish;
end 

// T3
always
begin
	T3 = 1'b0;
	T3 = #250000 1'b1;
	#250000;
end 

// RST
initial
begin
	RST = 1'b0;
	RST = #80000 1'b1;
	RST = #480000 1'b0;
end 
// SE[ 5 ]
initial
begin
	SE[5] = 1'b1;
	SE[5] = #1520000 1'b0;
	SE[5] = #480000 1'b1;
	SE[5] = #500000 1'b0;
	SE[5] = #1000000 1'b1;
	SE[5] = #2500000 1'b0;
	SE[5] = #500000 1'b1;
	SE[5] = #1500000 1'b0;
	SE[5] = #500000 1'b1;
	SE[5] = #500000 1'b0;
end 
// SE[ 4 ]
initial
begin
	SE[4] = 1'b1;
	SE[4] = #3500000 1'b0;
	SE[4] = #500000 1'b1;
	SE[4] = #1500000 1'b0;
	SE[4] = #1000000 1'b1;
	SE[4] = #1500000 1'b0;
	SE[4] = #500000 1'b1;
	SE[4] = #500000 1'b0;
	SE[4] = #500000 1'b1;
end 
// SE[ 3 ]
initial
begin
	SE[3] = 1'b1;
	SE[3] = #2000000 1'b0;
	SE[3] = #1500000 1'b1;
	SE[3] = #500000 1'b0;
	SE[3] = #2000000 1'b1;
	SE[3] = #500000 1'b0;
	SE[3] = #2500000 1'b1;
	SE[3] = #500000 1'b0;
end 
// SE[ 2 ]
initial
begin
	SE[2] = 1'b1;
	SE[2] = #2000000 1'b0;
	SE[2] = #3000000 1'b1;
	SE[2] = #1000000 1'b0;
	SE[2] = #500000 1'b1;
	SE[2] = #1500000 1'b0;
end 
// SE[ 1 ]
initial
begin
	SE[1] = 1'b1;
	SE[1] = #1520000 1'b0;
	SE[1] = #980000 1'b1;
	SE[1] = #500000 1'b0;
	SE[1] = #500000 1'b1;
	SE[1] = #500000 1'b0;
	SE[1] = #500000 1'b1;
	SE[1] = #1000000 1'b0;
	SE[1] = #500000 1'b1;
	SE[1] = #1000000 1'b0;
	SE[1] = #1000000 1'b1;
	SE[1] = #500000 1'b0;
	SE[1] = #500000 1'b1;
end 
// SE[ 0 ]
initial
begin
	SE[0] = 1'b1;
	SE[0] = #3000000 1'b0;
	SE[0] = #2500000 1'b1;
	SE[0] = #500000 1'b0;
	SE[0] = #500000 1'b1;
	SE[0] = #1000000 1'b0;
	SE[0] = #1000000 1'b1;
	SE[0] = #500000 1'b0;
end 
// M[ 5 ]
initial
begin
	M[5] = 1'b1;
	M[5] = #2500000 1'b0;
	M[5] = #1000000 1'b1;
	M[5] = #1000000 1'b0;
	M[5] = #1500000 1'b1;
	M[5] = #1500000 1'b0;
	M[5] = #500000 1'b1;
	M[5] = #1000000 1'b0;
end 
// M[ 4 ]
initial
begin
	M[4] = 1'b0;
	M[4] = #500000 1'b1;
	M[4] = #1000000 1'b0;
	M[4] = #500000 1'b1;
	M[4] = #2500000 1'b0;
	M[4] = #500000 1'b1;
	M[4] = #1000000 1'b0;
	M[4] = #500000 1'b1;
	M[4] = #1500000 1'b0;
end 
// M[ 3 ]
initial
begin
	M[3] = 1'b0;
	M[3] = #500000 1'b1;
	M[3] = #1000000 1'b0;
	M[3] = #1000000 1'b1;
	M[3] = #500000 1'b0;
	M[3] = #500000 1'b1;
	M[3] = #1500000 1'b0;
	M[3] = #1500000 1'b1;
	M[3] = #500000 1'b0;
	M[3] = #500000 1'b1;
	M[3] = #500000 1'b0;
	M[3] = #1000000 1'b1;
	M[3] = #500000 1'b0;
end 
// M[ 2 ]
initial
begin
	M[2] = 1'b1;
	M[2] = #1500000 1'b0;
	M[2] = #500000 1'b1;
	M[2] = #500000 1'b0;
	M[2] = #500000 1'b1;
	M[2] = #500000 1'b0;
	M[2] = #1500000 1'b1;
	M[2] = #1500000 1'b0;
	M[2] = #500000 1'b1;
	M[2] = #1000000 1'b0;
end 
// M[ 1 ]
initial
begin
	M[1] = 1'b1;
	M[1] = #1000000 1'b0;
	M[1] = #4500000 1'b1;
	M[1] = #500000 1'b0;
	M[1] = #2000000 1'b1;
	M[1] = #1000000 1'b0;
end 
// M[ 0 ]
initial
begin
	M[0] = 1'b0;
	M[0] = #500000 1'b1;
	M[0] = #500000 1'b0;
	M[0] = #2000000 1'b1;
	M[0] = #1500000 1'b0;
	M[0] = #1500000 1'b1;
	M[0] = #500000 1'b0;
	M[0] = #500000 1'b1;
	M[0] = #2500000 1'b0;
end 
endmodule

