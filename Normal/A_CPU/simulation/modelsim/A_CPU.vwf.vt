// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/22/2019 16:37:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          A_CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module A_CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg RST;
reg STEP;
reg SWA;
reg SWB;
// wires                                               
wire ALU;
wire ALU_B;
wire AR;
wire [7:0] BUS;
wire DOUT;
wire DR1;
wire DR2;
wire FC;
wire IR;
wire LDAR;
wire LDDR1;
wire LDDR2;
wire LDIR;
wire LDPC;
wire M;
wire OUT_B;
wire PC;
wire R0;
wire RAM;
wire RAM_B;
wire RAMWE;
wire SW_B;
wire T1;
wire uA;

// assign statements (if any)                          
A_CPU i1 (
// port map - connection between master ports and signals/registers   
	.ALU(ALU),
	.ALU_B(ALU_B),
	.AR(AR),
	.BUS(BUS),
	.CLK(CLK),
	.DOUT(DOUT),
	.DR1(DR1),
	.DR2(DR2),
	.FC(FC),
	.IR(IR),
	.LDAR(LDAR),
	.LDDR1(LDDR1),
	.LDDR2(LDDR2),
	.LDIR(LDIR),
	.LDPC(LDPC),
	.M(M),
	.OUT_B(OUT_B),
	.PC(PC),
	.R0(R0),
	.RAM(RAM),
	.RAM_B(RAM_B),
	.RAMWE(RAMWE),
	.RST(RST),
	.STEP(STEP),
	.SW_B(SW_B),
	.SWA(SWA),
	.SWB(SWB),
	.T1(T1),
	.uA(uA)
);
initial 
begin 
#1000000 $stop;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #8000 1'b1;
	#2000;
end 

// RST
initial
begin
	RST = 1'b0;
	RST = #650000 1'b1;
	RST = #10000 1'b0;
end 

// STEP
initial
begin
	repeat(7)
	begin
		STEP = 1'b0;
		STEP = #42500 1'b1;
		# 42500;
	end
	STEP = 1'b0;
	STEP = #42500 1'b1;
	STEP = #42500 1'b0;
	STEP = #42500 1'b1;
	# 42500;
	repeat(2)
	begin
		STEP = 1'b0;
		STEP = #42500 1'b1;
		# 42500;
	end
	STEP = 1'b0;
	STEP = #42500 1'b1;
end 

// SWA
initial
begin
	SWA = 1'b0;
	SWA = #290000 1'b1;
	SWA = #90000 1'b0;
end 

// SWB
initial
begin
	SWB = 1'b0;
	SWB = #320000 1'b1;
	SWB = #60000 1'b0;
end 
endmodule

